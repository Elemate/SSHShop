/** *  */package com.wq.user.action;import java.awt.Color;import java.awt.Font;import java.awt.Graphics;import java.awt.Graphics2D;import java.awt.image.BufferedImage;import java.util.Random;import javax.imageio.ImageIO;import org.apache.struts2.ServletActionContext;import com.opensymphony.xwork2.ActionSupport;/** * @author youto8023 * 生成验证码 */@SuppressWarnings("serial")public class CheckImgAction extends ActionSupport {		@Override	public String execute() throws Exception {		//步骤一， 先建个图片模版		int width = 140;		int height = 40;		BufferedImage bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);				//步骤二，设置背景颜色和边框		Graphics graphics = bufferedImage.getGraphics();	//获得画笔对象		graphics.setColor(getRandColor(200, 250));		//给画笔设置颜色		graphics.fillRect(0, 0, width, height); 		//填充背景颜色		graphics.setColor(Color.RED);		graphics.drawRect(0, 0, width-1, height-1); 	//添加边框				//步骤三,  四个数字		Graphics2D graphics2d = (Graphics2D) graphics;		graphics.setFont(new Font("宋体", Font.BOLD, 20));		String words = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";		StringBuffer sb = new StringBuffer();		Random random = new Random();		int x = 10;  //字符初始横坐标				for (int i = 0; i < 4; i++) {			graphics2d.setColor(getRandColor(20, 110));			int jiaodu = random.nextInt(60) - 30;	//角度			double theta = jiaodu*Math.PI/180;			int index = random.nextInt(words.length());			char code = words.charAt(index);			sb.append(code);						graphics2d.rotate(theta, x, 20);			graphics.drawString(String.valueOf(code), x, 20);			graphics2d.rotate(-theta, x, 20);			x += 30;					}		ServletActionContext.getRequest().getSession().setAttribute("checkCode", sb.toString());				//步骤四，绘制干扰线		graphics.setColor(getRandColor(160, 190));		int x1, x2, y1, y2;		for (int i = 0; i < 30; i++) {			x1 = random.nextInt(width);			x2 = random.nextInt(10);			y1 = random.nextInt(height);			y2 = random.nextInt(10);			graphics.drawLine(x1, y1, x1+x2, y1+y2);		}				//输出到浏览器		graphics.dispose();		ImageIO.write(bufferedImage, "JPG", ServletActionContext.getResponse().getOutputStream());		return NONE;	}	/**	 * @param i	 * @param j	 * @return	 */	private Color getRandColor(int fc, int bc) {		if (fc>255) {			fc = 255;		}		if (bc>255) {			bc = 255;		}		int r = fc + new Random().nextInt(bc-fc);		int g = fc + new Random().nextInt(bc-fc);		int b = fc + new Random().nextInt(bc-fc);		return new Color(r, g, b);	}			}